[["lab-6-climate-trend-analysis-25-pts.html", "Chapter 14 Lab 6: Climate trend analysis (25 pts) 14.1 Summary questions and deliverable 14.2 New packages 14.3 Data download, exploration and cleaning 14.4 Computing annual values 14.5 Exploratory data analysis (EDA) of annual values 14.6 Trend analysis and creating Table 1 14.7 See summary section at top for questions to answer and deliverable.", " Chapter 14 Lab 6: Climate trend analysis (25 pts) In this lab you are going to work with weather / climate data from the MSU weather station that has data from 1892 - now. You will use the Mann-Kendall test to determine if there are significant trends in various climate data and will also calculate the slope of any trend using the Sens’s slope. Need to add something. 14.1 Summary questions and deliverable For this lab you will answer the following questions and submit your lab on D2L as a word doc. Insert tables and figures into your word doc as appropriate. Always provide a caption for any tables and figures. Describe what the Mann-Kendall (MK) test does and what the Sen’s slope is and why they are appropriate for climate data. (3 pts) Provide a table (Table 1) of MK p-values and Sen’s slopes over the entire period (1900 – current). (5 pts) For the average temperature provide a figure that has time on the x and average T on the y. Fit a stat_smooth to this data “stat_smooth(method =”lm”)” (2 pt). Provide a table (Table 2) of MK p-values and Sen’s slopes over the climate normal period 1990 – 2020. Compare and contrast this to what you found (p-value and Sen’s slope) over the entire period from table 1. (5 pts) In this lab we have evaluated significance (i.e., MK p-values) in trends in climate data. For the data in Table 1, communicate: A) What this tells you about climate at the MSU weather station over the past 122 years. B) Describe any similarities and/or differences in the statistics (MK p-value and Sen’s slope) for the entire record (1900 - current) vs. the normal period (1990 - 2020). (10 pts) 14.2 New packages We will use the packages below. You will need to install the rnoaa package for downloading NOAA data, and the trend package for doing Mann-Kendall trend tests and computing the Sen’s slope. library(tidyverse) ## ── Attaching core tidyverse packages ────────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.4 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.2 ## ── Conflicts ──────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors library(plotly) ## ## Attaching package: &#39;plotly&#39; ## ## The following object is masked from &#39;package:ggplot2&#39;: ## ## last_plot ## ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## ## The following object is masked from &#39;package:graphics&#39;: ## ## layout library(rnoaa) # for downloading data from GHCN ## Registered S3 method overwritten by &#39;hoardr&#39;: ## method from ## print.cache_info httr ## The rnoaa package will soon be retired and archived because the underlying APIs have changed dramatically. The package currently works but does not pull the most recent data in all cases. A noaaWeather package is planned as a replacement but the functions will not be interchangeable. #install.packages(&quot;remotes&quot;) #remotes::install_github(&quot;ropensci/rnoaa&quot;) #install.packages(&quot;trend&quot;) library(trend) # for Mann-Kendall trend analysis and Sen&#39;s slope site &lt;- &quot;USC00241044&quot; vars &lt;- c(&quot;prcp&quot;, &quot;tmax&quot;, &quot;tmin&quot;) end &lt;- as_date(&quot;2023-09-30&quot;) 14.3 Data download, exploration and cleaning met_data &lt;- meteo_pull_monitors( monitors = site, keep_flags = FALSE, date_min = NULL, date_max = end, var = vars ) ## using cached file: /Users/timcovino/Library/Caches/org.R-project.R/R/rnoaa/noaa_ghcnd/USC00241044.dly ## date created (size, mb): 2023-11-27 13:59:47.225981 (4.582) ## file min/max dates: 1892-04-01 / 2023-11-30 x &lt;- met_data$date y &lt;- met_data$tmax plot_fun &lt;- function(...){ met_data %&gt;% ggplot(aes(x = x, y = y)) + geom_point() } plot_fun(x, y) ## Warning: Removed 93 rows containing missing values or values outside the scale range ## (`geom_point()`). met_data_adj &lt;- met_data %&gt;% mutate(prcp = prcp/10, tmin = tmin/10, tmax = tmax/10, tavg = ((tmin + tmax)/2)) # The units of these data are prcp = tenths of mm, snow = mm (we aren&#39;t using snow data today but just fyi), tmin = tenths of C, tmax = tenths of C. So we need to convert the prcp, tmin, and tmax data. Add a water year and filter the data to start on 10/1/1900. met_data_adj &lt;- met_data_adj %&gt;% filter(date &gt; &quot;1900-09-30&quot;) %&gt;% mutate(wtr_yr = if_else(month(date) &gt; 9, year(date) + 1, year(date))) %&gt;% select(id, date, wtr_yr, everything()) 14.4 Computing annual values Now that you have a cleaned data frame you will now begin the climate data analysis. The first step is to create a data frame that has annual values called met_data_an that includes: there are many others we could do, like the mean of the mins and the maxes, but we will just do the ones listed here for this project. total annual prcp the min of the minimum temperatures the max of the minimum teperatures the min of the maximum temperatures the max of the maximum temperatures the mean of the average temperatures met_data_an &lt;- met_data_adj %&gt;% group_by(wtr_yr) %&gt;% reframe(tot_p = sum(prcp, na.rm = TRUE), # Can also use reframe here instead of summarize. Reframe is a more generalizable form of summarize. min_min_t = min(tmin, na.rm = TRUE), max_min_t = max(tmin, na.rm = TRUE), min_max_t = min(tmax, na.rm = TRUE), max_max_t = max(tmax, na.rm = TRUE), av_t = mean(tavg, na.rm = TRUE)) 14.5 Exploratory data analysis (EDA) of annual values For your own insight, make plots of the variables in met_data_an over time to see if there appear to be trends in any of the data. If you want practice making a function you can do so here. Remember functions look like: my_fun &lt;- function(x){ do_stuff() } Can also be written as my_fun &lt;- function(…){ do_stuff() } met_data_an %&gt;% ggplot(aes(x = wtr_yr)) + geom_line(aes(y = min_min_t), color = &quot;blue&quot;) + geom_line(aes(y = max_min_t), color = &quot;cyan&quot;) + geom_line(aes(y = min_max_t), color = &quot;pink&quot;) + geom_line(aes(y = max_max_t), color = &quot;red&quot;) + geom_line(aes(y = av_t), color = &quot;green&quot;) + labs(x = &quot;&quot;, y = &quot;Temp (C)&quot;) met_data_an %&gt;% ggplot(aes(x = wtr_yr, y = tot_p)) + geom_line(linetype = &quot;dashed&quot;, color = &quot;grey&quot;) + geom_point() + geom_smooth(method = &quot;lm&quot;) + labs(y = &quot;Total annual P (mm)&quot;, x = &quot;Water year&quot;) + theme_bw() ## `geom_smooth()` using formula = &#39;y ~ x&#39; 14.6 Trend analysis and creating Table 1 Next, you will fill in a table. The table will have columns for: See the word doc handout for an example of the table that you will fill in. total annual prcp the min of the minimum temperatures the max of the minimum temperatures the min of the maximum temperatures the max of the maximum temperatures the mean of the average temperatures And values for: the p-value for the Mann-Kendall test. We will use p &lt; 0.05 as an indicator of a significant trend. the slope of the trend as given by the Sen’s slope. t_sens_tot_p &lt;- sens.slope(met_data_an$tot_p) # this is how you would get the MK p-value and Sen&#39;s slope for one of the variables (av_t) in the data frame. Can you use apply or map to do this for all the variables in the data frame? t_sens_tot_p[3] ## $p.value ## [1] 0.006937417 Both apply and map return a list. “A list in R can contain many different data types inside it. A list is a collection of data which is ordered and changeable.” Here is a link with information about lists and how to access elements within the list https://data-flair.training/blogs/r-list-tutorial/ Chapters 19 &amp; 21 in RDS are both very useful resources for functions and iteration (e.g., apply, map). In the next class I will show a tutorial on apply, map and pulling information from lists. But you should work with a partner to test them out and see what they do. met_test_data &lt;- met_data_an %&gt;% filter(wtr_yr &gt; 1989 &amp; wtr_yr &lt; 2021) %&gt;% select(-wtr_yr) test &lt;- apply(X = met_test_data, # The data frame you want to apply to FUN = sens.slope, # The function you want to run MARGIN = 2) # Margin (axis) to apply over 1 = rows, 2 = columns test[[c(1,1)]] ## Sen&#39;s slope ## 1.683333 test_map &lt;- met_test_data %&gt;% map(sens.slope) #Extract values from the list manually. test_map[[c(1,3)]] ## [1] 0.5406231 #Extract values from the list using map. This part does the p-values. p_vals &lt;- test_map[1:6] %&gt;% map(3) %&gt;% flatten_dfc() %&gt;% pivot_longer(names_to = &quot;parameter&quot;, values_to = &quot;p_value&quot;, cols = everything()) #Same as above but for Sens&#39;s slopes. sens &lt;- test_map[1:6] %&gt;% map(1) %&gt;% flatten_dfc() %&gt;% pivot_longer(values_to = &quot;sens_slope&quot;, cols = everything()) %&gt;% select(-name) ## New names: ## • `Sen&#39;s slope` -&gt; `Sen&#39;s slope...1` ## • `Sen&#39;s slope` -&gt; `Sen&#39;s slope...2` ## • `Sen&#39;s slope` -&gt; `Sen&#39;s slope...3` ## • `Sen&#39;s slope` -&gt; `Sen&#39;s slope...4` ## • `Sen&#39;s slope` -&gt; `Sen&#39;s slope...5` ## • `Sen&#39;s slope` -&gt; `Sen&#39;s slope...6` #Last, we bind the two data frames together so we have the p-values and the Sen&#39;s slopes both in one df. sens_p &lt;- cbind(p_vals, sens) 14.7 See summary section at top for questions to answer and deliverable. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
