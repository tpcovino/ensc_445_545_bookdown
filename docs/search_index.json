[["index.html", "Watershed Analysis Chapter 1 Introduction 1.1 Course overview and objectives 1.2 Structure 1.3 Philosophical approach and books &amp; resources we will utilize 1.4 Tentative schedule, subject to change", " Watershed Analysis Tim Covino 2023-01-31 Chapter 1 Introduction This book provides the materials that we will use in Watershed Analysis (ENSC 445/545). In this class we will be learning the fundamentals of watershed analysis in R. Instructor: Dr. Tim Covino Class times: T 10:50 – 12:05; Th 10:50 – 12:05 Office hours: By appointment Website: https://tpcovino.github.io/ensc_445_545_bookdown 1.1 Course overview and objectives provide theoretical understanding and practical experience with common analysis and modeling techniques relevant to watershed hydrology. provide training in analyzing, simulating, and presenting scientific data in written and oral formats. 1.2 Structure This class will be largely hands-on, and students will be conducting watershed analyses and modeling exercises. We will be doing our analysis and modeling in R and will do some R coding in each class session. Programming is best learned by doing it often. We will generally have “lecture” on Tuesday, where we will talk about and work through various types of hydrological analyses. On Thursday’s you will then put the content from Tuesday to work in a lab where you will complete a variety of hydrological analyses in R. 1.3 Philosophical approach and books &amp; resources we will utilize This course will use all online and open-source resources and will follow FAIR (findability, accessibility, interoperability, and reusability) data principles and promote sharing of hydrological education and research materials. Our computing will utilze open source R and RStudio software. Books and readings will include R for Data Science and Statistical Methods in Water Resources, but other readings will be made available on this bookdown page as needed. We will promote an open, equitable, and collaborative environment such that we can all succeed and improve our skills in watershed analysis. 1.4 Tentative schedule, subject to change Week 1 (Unit 1): - Lecture (1/19): Introduction, overview, and technical skills. - Reading: Chapters 1, 2, &amp; 3 1-Welcome, 2-Introduction, &amp; 3-Data visualization in R for Data Science (RDS). Week 2 (Units 1 &amp; 2): - Lecture (1/24): Technical skills continued. Data visualization, data wrangling, and programming. - Lab 1 (1/26): Data visualization, data wrangling, and programming. - Reading: Chapter 2.1: Graphical Analysis of Single Datasets in Statistical Methods in Water Resources (SMWR). AND Chapters 4 &amp; 5 4-Workflow: Basics &amp; 5-Data transformation in RDS. Week 3 (Unit 3): - Lecture (1/31): Statistics in hydrology. - Lab 2 (2/2): Statistics in hydrology. - Reading: Chapter 1: 1-Summarizing Univariate Data in SMWR Week 4 (Unit 4): - Lecture (2/7): Downloading and shaping data frames. - Lab 3 (2/9): Downloading and shaping data frames. - Reading: The Experimental Forest Network, the Tenderfoot Creek Experimental Forest AND Introduction to the dataRetrieval package AND Chapter 12 &amp; 13 of R for Data Science Week 5 (Units 1 - 4): - Lecture (2/14): Term project overview and assign take home Exam 1. - Term project work session: project brainstorm, identify data, analysis, and models (if applicable) necessary to complete project. - Exam 1 part II (2/16): In class work and Exam 1 resubmission. Week 6 (Unit 5): - Lecture (2/21): Surface water: Rating curves and hydrographs. - Lab 4 (2/23): Rating curves and hydrographs - Reading: Chapter 4 4-Hypothesis Tests in SMWR. Week 7 (Unit 6): - Lecture (2/28): Flow frequency analysis (high and low flows) - Lab 5 (3/2): Flow frequency analysis - Reading: PeakFlow Frequency Estiamtes for USGS Streamflow-Gaging Stations in Connecticut AND Definitions and characteristics of low flows in EPA Environmental Modeling Community of Practice Week 8 (Unit 6 contd): - Lecture (3/7): Precipitation data acquisition and analysis - Lab 6 (3/9): Precipitation analysis - Reading: Frequency analysis of rainfall data Up to page 32. Week 9: Spring break (3/14 &amp; 3/16) - no class! Week 10 (Unit 7): - Lecture (3/21): Hydrologic processes, climate and water balance. Trend detection and analysis, non-parametric approaches. - Lab 7 (3/23): Trend analysis - Reading: Chapters 12.1 &amp; 12.2 12.1-General Structure of Trend Tests &amp; 12.2-Trend Tests with No Exogenous Variables in SMWR. Week 11 (Unit 8): - Lecture (3/28): Geospatial data in R - Lab (3/30): Term project work session and assign Exam 2 Week 12 (Units 5 - 8): - Lecture (4/4): Geospatial hydrology in R - Lab (4/6): In class work and Exam 1 resubmission. - Reading: Geocomputation with R AND Geospatial analysis in R Week 13 (Unit 9): - Lecture (4/11): Watershed delineation in R - Lab (4/13): Term project update presentations Week 14 (Unit 10): - Lecture (4/18): Hydrological modeling part 1 - Lab (4/20): Lab or term project work session (TBD) - Reading An Overview of Rainfall-Runoff Model Types Week 15 (Unit 10 contd): - Lecture (4/25): Hydrological modeling part 2 - Lab (4/27): Lab or term project work session (TBD) Week 16: Term project presentations (5/2 and 5/4) Week 17 (finals week): Final exam 5/9 10 - 11:50 AM (Units 1 - 10) knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, results = TRUE) "],["intro-to-data-visualization.html", "Chapter 2 Intro to data visualization 2.1 Learning Objectives 2.2 Download and install tidyverse library 2.3 Reading data 2.4 Our first ggplot 2.5 Change point type 2.6 Set colors 2.7 Controlling color with a third variable and other functions 2.8 Plotting multiple groups (adding a third variable) 2.9 Facets 2.10 Two variable faceting 2.11 Boxplots 2.12 More about color, size, etc 2.13 Multiple geoms 2.14 Exit ticket", " Chapter 2 Intro to data visualization 2.1 Learning Objectives The learning objectives for today are to begin getting comfortable navigating RStudio. A great way to do this is through data visualization. At the end of todays activities students will be able to: Load data to RStudio Visualize data by making plots/figures Install and load packages Begin coding using tidyverse Have an understanding of projects and folder management Knit .Rmd to .html Follow this link to download everything you need for this unit. When you get to GitHub click on “Code” (green button) and select “download zip”. You will then save this to a local folder where you should do all of your work for this class. You will work through the “_blank.Rmd”. Always be sure to read the README.md files in the GitHub repo. Once you have this folder saved where you would like it, open RStudio and navigate to the folder. Next, open the project (“.Rproj”). Doing so will set the folder as the working directory, make your life easier, and make everything generally work. The use of projects is highly recommended and is the practice we will follow in this class. You will learn more about projects later, for now just know they are useful and make things easier. In this unit we want to start familiarizing ourselves with R by visualizing some hydrological data. The reading for this week will also begin to get you more familiar with R and RStudio. Please read Chapters 1, 2, &amp; 3 1-Welcome, 2-Introduction, &amp; 3-Data visualization in R for Data Science (RDS). 2.2 Download and install tidyverse library We will use the tidyverse a lot this semester. It is a suite of packages that handles plotting and data wrangling efficiently. You only have to install the library once. You have to load it using the library() function each time you start an R session. #install.packages(&quot;tidyverse&quot;) library(tidyverse) 2.3 Reading data The following lines will read in the data we will use for this exercise. Don’t worry about this right now beyond running it, we will talk more about it later. Pine &lt;- read_csv(&quot;pine_jan-mar_2010.csv&quot;) SNP &lt;- read_csv(&quot;pine_nfdr_jan-mar_2010.csv&quot;) RBI &lt;- read_csv(&quot;flashy_dat_subset.csv&quot;) Basic ggplot syntax 2.4 Our first ggplot Let’s look at the Pine data, plotting streamflow (the cfs column) by the date (datetime column). We will show the time series as a line. ggplot(data = Pine, aes(x = datetime, y = cfs)) + geom_line() 2.5 Change point type Now let’s make the same plot but show the data as points, using the shape parameter in geom_point() we can change the point type to any of the following: See here ggplot(data = Pine, aes(x = datetime, y = cfs))+ geom_point(shape = 5) 2.6 Set colors We can also “easily” change the color. Easily is in quotes because this often trips people up. If you put color = “blue” in the aesthetic function, think about what that is telling ggplot. It says “control the color using”blue”“. That doesn’t make a whole lot of sense, so neither does the output… Try it. What happens is that if color = “blue” is in the aesthetic, you are telling R that the color used in the geom represents “blue”. This is very useful if you have multiple geoms in your plot, are coloring them differently, and are building a legend. But if you are just trying to color the points, it kind of feels like R is trolling you… doesn’t it? Take the color = “blue” out of the aesthetic and you’re golden. ggplot(data = Pine, aes(x = datetime, y = cfs, color = &quot;blue&quot;))+ geom_point() ggplot(data = Pine, aes(x = datetime, y = cfs))+ geom_point(color = &quot;blue&quot;) 2.7 Controlling color with a third variable and other functions Let’s plot the data as a line again, but play with it a bit. First: make the line blue ggplot(data = Pine, aes(x = datetime, y = cfs)) + geom_line(color = &quot;blue&quot;) Second: change the theme See ggplot themes here ggplot(data = Pine, aes(x = datetime, y = cfs)) + geom_line(color = &quot;blue&quot;) + theme_linedraw() Third: change the axis labels ggplot(data = Pine, aes(x = datetime, y = cfs)) + geom_line(color = &quot;blue&quot;) + theme_linedraw() + labs(x = &quot;Date&quot;, y = &quot;Q (cfs)&quot;) Fourth: color by discharge See here for changing axis labels and coloring by a variable (in this case discharge) ggplot(data = Pine, aes(x = datetime, y = cfs, color = cfs)) + geom_line() + theme_linedraw() + labs(x = &quot;Date&quot;, y = &quot;Q (cfs)&quot;) 2.8 Plotting multiple groups (adding a third variable) The SNP dataset has two different streams: Pine and NFDR We can look at the two of those a couple of different ways. First, make two lines, colored by the stream by adding color = to your aesthetic. Remember that we can have a look at column headers with head(df), if you need to remind yourself of variable names. ggplot(data = SNP, aes(x = datetime, y = cfs, color = StationID)) + geom_line() Now use what we just did to make that figure look better. ggplot(data = SNP, aes(x = datetime, y = cfs, color = StationID)) + geom_line() + labs(x = &quot;Date&quot;, y = &quot;Q (cfs)&quot;, color = &quot;Stream&quot;) + theme_linedraw(base_size = 18) 2.9 Facets We can also use facets. You must tell the facet_wrap what variable to use to make the separate panels (facets =). It’ll decide how to orient them or you can tell it how. We want them to be on top of each other so we are going to tell it we want 2 rows by setting nrow = 2. Note that we have to put the column used to make the facets in quotes after facets = ggplot(data = SNP, aes(x = datetime, y = cfs)) + geom_line() + facet_wrap(facets = &quot;StationID&quot;, nrow = 2) 2.10 Two variable faceting You can also use facet_grid() to break your plots up into panels based on two variables. Below we will create a panel for each month in each watershed. Adding scales = “free” allows facet_grid to change the axes. By default, all axes will be the same. This is often what we want, so we can more easily compare magnitudes, but sometimes we are looking for patterns more, so we may want to let the axes have whatever range works for the individual plots. ggplot(data = SNP, aes(x = datetime, y = cfs)) + geom_line() + facet_grid(StationID ~ month, scales = &quot;free&quot;) 2.11 Boxplots We can look at these data in other ways as well. A very useful way to look at the variation of two groups is to use a boxplot. Because the data span several orders of magnitude, we will have to log the y axis to see the differences between the two streams. We do that by adding scale_y_log10() ggplot(data = SNP, aes(x = StationID, y = cfs)) + stat_boxplot() + scale_y_log10() To investigate the boxplot more closely we can use “plotly”, which generates interactive plots. #install.packages(&quot;plotly&quot;) library(plotly) ggplotly(ggplot(data = SNP, aes(x = StationID, y = cfs)) + stat_boxplot()+ scale_y_log10() ) 2.12 More about color, size, etc Let’s play around a bit with controlling color, point size, etc with other data. We can control the size of points by putting size = in the aes() and color by putting color = ggplot(RBI, aes(x = DRAIN_SQKM, y = RBI, size = T_AVG_SITE, color = STATE))+ geom_point() If you use a point type that has a background, like #21, you can also set the background color using bg = If points are too close together to see them all you can use a hollow point type or set the alpha lower so the points are transparent (alpha = ) ggplot(data = RBI, aes(x = DRAIN_SQKM, y = RBI, size = T_AVG_SITE, bg = STATE))+ geom_point(pch = 21, alpha = 0.3) You can also easily make that an interactive plot with ggplotly. Try doing that. 2.13 Multiple geoms Finally: You can add multiple geoms to the same plot. Examples of when you might want to do this are when you are showing point data and you want to have a line connecting them. Or if you are fitting a linear model to two data sets and you want to show each. These are just two examples. There are many other reasons you would do this. Point being you simply add additional geom_… lines to add additional geoms. See here for information on linetype aesthetics. Using a “dashed” linetype to connect point measurements is a common approach. ggplot(data = RBI, aes(x = RBI, y = DRAIN_SQKM, color = STATE))+ geom_line(linetype = &quot;dashed&quot;) + geom_point() ggplot(data = RBI, aes(x = RBI, y = DRAIN_SQKM, color = AGGECOREGION))+ stat_smooth(method = &quot;lm&quot;, linetype = 2)+ geom_point() That’s it for today! 2.14 Exit ticket Write a code that generates a ggplot from a data frame called df and plots Date on the x-axis, discharge on the y-axis as a line, and colors by gauging_station. knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, results = TRUE) "],["data-wrangling-using-tidyverse.html", "Chapter 3 Data wrangling using tidyverse 3.1 Introduction 3.2 Learning objectives: 3.3 You can use R as a calculator 3.4 You can create new objects using &lt;- 3.5 Using functions 3.6 Read in some data 3.7 What is a tibble? 3.8 Data wrangling in dplyr 3.9 Filter 3.10 Arrange 3.11 Select 3.12 Mutate 3.13 Summarize 3.14 Multiple operations with pipes 3.15 A final comment on NAs 3.16 That’s it for today 3.17 Exit ticket", " Chapter 3 Data wrangling using tidyverse Follow this link to download everything you need for this unit. When you get to GitHub click on “Code” (green button) and select “download zip”. You will then save this to a local folder where you should do all of your work for this class. You will work through the “_blank.Rmd”. Always be sure to read the README.md files in the GitHub repo. Once you have this folder saved where you would like it, open RStudio and navigate to the folder. Next, open the project (“.Rproj”). Doing so will set the folder as the working directory, make your life easier, and make everything generally work. 3.1 Introduction We have messed around with plotting a bit and you’ve seen a little of what R can do. So now let’s review or introduce you to some basics. Even if you have worked in R before, it is good to be remind of/practice with this stuff, so stay tuned in! Reading for this week: Chapter 2.1: Graphical analysis of single datasets in SMWR Workflow: basics Data transformation 3.2 Learning objectives: Working through this exercise will help students: - become more familiar with the RStudio IDE - get in the habit of running single lines of code - know what a tibble is - know what the assignment operator is - begin using base and dplyr functions 3.3 You can use R as a calculator If you just type numbers and operators in, R will spit out the results. It is generally good to run one line of code at a time. In mac you do that by putting your cursor on the line and hitting command + enter. On windows/PC that is ctrl + enter. Here is a link to info on Editing and Executing code in RStudio Very handy link to all keyboard shortcuts Windows, Linux and Mac 1 + 2 ## [1] 3 2 + 2 ## [1] 4 3.4 You can create new objects using &lt;- Yes, = does the same thing. But use &lt;-. We will call &lt;- assignment or assignment operator. When we are coding in R we use &lt;- to assign values to objects and = to set values for parameters in functions/equations/etc. Using &lt;- helps us differentiate between the two. Norms for formatting are important because they help us understand what code is doing, especially when stuff gets complex. Oh, one more thing: Surround operators with spaces. x &lt;- 1 is easier to read than x&lt;-1 You can assign single numbers or entire chunks of data using &lt;- So if you had an object called my_data and wanted to copy it into my_new_data you could do: my_new_data &lt;- my_data You can then recall/print the values in an object by just typing the name by itself. In the code chunk below, assign a 3 to the object “y” and then print it out. # This is a code chunk. # Putting a pound sign in here allows me to type text that is not code. # The stuff below is code. Not text. y &lt;- 3 y ## [1] 3 If you want to assign multiple values, you have to put them in the function c() c means combine. R doesn’t know what to do if you just give it a bunch of values with space or commas, but if you put them as arguments in the combine function, it’ll make them into a vector. Any time you need to use several values, even passing as an argument to a function, you have to put them in c() or it won’t work. a &lt;- c(1,2,3,4) a ## [1] 1 2 3 4 When you are creating objects, try to give them meaningful names so you can remember what they are. You can’t have spaces or operators that mean something else as part of a name. And remember, everything is case sensitive. Assign the value 5.4 to water_pH and then try to recall it by typing “water_ph” water_pH &lt;- 5.4 water_pH ## [1] 5.4 If we want to remove something from the environment we can use rm(). Try to remove water_pH. You can also set objects equal to strings, or values that have letters in them. To do this you just have to put the value in quotes, otherwise R will think it is an object name and tell you it doesn’t exist. Try: name &lt;- “your name” and then name &lt;- your name What happens if you forget the ending parenthesis? R can be cryptic with it’s error messages or other responses, but once you get used to them, you know exactly what is wrong when they pop up. As a note - when you go to the internet for example code it will often say things like df &lt;- your_data, this is similar to what I’ve written above: name &lt;- “your name”. It means enter you name (or your data). As you progress you will get better at understanding example code and understanding error messages. name &lt;- &quot;Tim&quot; #name &lt;- Tim 3.5 Using functions As an example, let’s try the seq() function, which creates a sequence of numbers. seq(from = 1, to = 10, by = 1) # these are base R functions ## [1] 1 2 3 4 5 6 7 8 9 10 # or seq(1, 10, 1) ## [1] 1 2 3 4 5 6 7 8 9 10 # or seq(1, 10) ## [1] 1 2 3 4 5 6 7 8 9 10 # Predict what this does seq(10,1) ## [1] 10 9 8 7 6 5 4 3 2 1 3.6 Read in some data First we will load the tidyverse library, everything we have done so far today is in base R. Next, let’s load a few dataframes and have a look at them. We will load the “PINE_NFDR_Jan-Mar_2010.csv” and “flashy_dat_all.csv” files. Important: read_csv() is the tidyverse csv reading function, the base R function is read.csv(). read.csv() will not read your data in as a tibble, which is the format used by tidyverse functions. You should get in the habit of using the tidyverse versions such as read_csv(). library(tidyverse) flow &lt;- read_csv(&quot;pine_nfdr_jan-mar_2010.csv&quot;) rbi &lt;- read_csv(&quot;flashy_dat_all.csv&quot;) 3.7 What is a tibble? Good question. It’s a fancy way to store data that works well with tidyverse functions. Let’s look at the flow tibble with “head” and “str” head(flow) ## # A tibble: 6 × 8 ## StationID cfs surrogate datetime year quarter month day ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 PINE 11.6 N 2010-01-01 00:00:00 2010 1 1 1 ## 2 PINE 11.6 N 2010-01-01 01:00:00 2010 1 1 1 ## 3 PINE 11.2 N 2010-01-01 02:00:00 2010 1 1 1 ## 4 PINE 11.2 N 2010-01-01 03:00:00 2010 1 1 1 ## 5 PINE 11.2 N 2010-01-01 04:00:00 2010 1 1 1 ## 6 PINE 11.2 N 2010-01-01 05:00:00 2010 1 1 1 str(flow) ## spc_tbl_ [4,320 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ## $ StationID: chr [1:4320] &quot;PINE&quot; &quot;PINE&quot; &quot;PINE&quot; &quot;PINE&quot; ... ## $ cfs : num [1:4320] 11.6 11.6 11.2 11.2 11.2 ... ## $ surrogate: chr [1:4320] &quot;N&quot; &quot;N&quot; &quot;N&quot; &quot;N&quot; ... ## $ datetime : POSIXct[1:4320], format: &quot;2010-01-01 00:00:00&quot; &quot;2010-01-01 01:00:00&quot; ... ## $ year : num [1:4320] 2010 2010 2010 2010 2010 2010 2010 2010 2010 2010 ... ## $ quarter : num [1:4320] 1 1 1 1 1 1 1 1 1 1 ... ## $ month : num [1:4320] 1 1 1 1 1 1 1 1 1 1 ... ## $ day : num [1:4320] 1 1 1 1 1 1 1 1 1 1 ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. StationID = col_character(), ## .. cfs = col_double(), ## .. surrogate = col_character(), ## .. datetime = col_datetime(format = &quot;&quot;), ## .. year = col_double(), ## .. quarter = col_double(), ## .. month = col_double(), ## .. day = col_double() ## .. ) ## - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; Now read in the same data with read.csv() which will NOT read the data as a tibble. How is it different? Output each one in the Console. Knowing the data type for each column is super helpful for a few reasons…. let’s talk about them. flow_NT &lt;- read.csv(&quot;pine_nfdr_jan-mar_2010.csv&quot;) # this is base R head(flow_NT) ## StationID cfs surrogate datetime year quarter month day ## 1 PINE 11.58 N 2010-01-01T00:00:00Z 2010 1 1 1 ## 2 PINE 11.58 N 2010-01-01T01:00:00Z 2010 1 1 1 ## 3 PINE 11.24 N 2010-01-01T02:00:00Z 2010 1 1 1 ## 4 PINE 11.24 N 2010-01-01T03:00:00Z 2010 1 1 1 ## 5 PINE 11.24 N 2010-01-01T04:00:00Z 2010 1 1 1 ## 6 PINE 11.24 N 2010-01-01T05:00:00Z 2010 1 1 1 head(flow) ## # A tibble: 6 × 8 ## StationID cfs surrogate datetime year quarter month day ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 PINE 11.6 N 2010-01-01 00:00:00 2010 1 1 1 ## 2 PINE 11.6 N 2010-01-01 01:00:00 2010 1 1 1 ## 3 PINE 11.2 N 2010-01-01 02:00:00 2010 1 1 1 ## 4 PINE 11.2 N 2010-01-01 03:00:00 2010 1 1 1 ## 5 PINE 11.2 N 2010-01-01 04:00:00 2010 1 1 1 ## 6 PINE 11.2 N 2010-01-01 05:00:00 2010 1 1 1 # We can remove the flow_NT dataframe from the enviroment with rm(flow_NT) rm(flow_NT) 3.8 Data wrangling in dplyr If you forget syntax or what the following functions do, here is a cheat sheet: https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf We will demo five functions below (these are tidyverse/dplyr functions): filter() - returns rows that meet specified conditions arrange() - reorders rows select() - pull out variables (columns) mutate() - create new variables (columns) or reformat existing ones summarize() - collapse groups of values into summary stats 3.9 Filter Write an expression that returns data in rbi for the state of Montana (MT) filter(rbi, STATE == &quot;MT&quot;) ## # A tibble: 17 × 26 ## site_no RBI RBIrank STANAME DRAIN…¹ HUC02 LAT_G…² LNG_G…³ STATE CLASS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 6037500 0.0338 8 Madison … 1126. 10U 44.7 -111. MT Ref ## 2 6043500 0.0724 61 Gallatin… 2120. 10U 45.5 -111. MT Ref ## 3 6073500 0.104 123 Dearborn… 835. 10U 47.2 -112. MT Ref ## 4 6154410 0.118 157 Little P… 33.4 10U 48.0 -109. MT Ref ## 5 6187915 0.110 143 Soda But… 73.1 10U 45.0 -110. MT Ref ## 6 6191000 0.0627 46 Gardner … 514. 10U 45.0 -111. MT Ref ## 7 6191500 0.0649 49 Yellowst… 6784. 10U 45.1 -111. MT Ref ## 8 6289000 0.0652 50 Little B… 471. 10U 45.0 -108. MT Ref ## 9 6291500 0.0923 94 Lodge Gr… 218 10U 45.1 -108. MT Ref ## 10 12358500 0.0922 93 Middle F… 2939. 17 48.5 -114. MT Ref ## 11 12374250 0.0848 77 Mill Cr … 50.8 17 47.8 -115. MT Ref ## 12 12375900 0.0985 113 South Cr… 19.7 17 47.5 -114. MT Ref ## 13 12377150 0.118 153 Mission … 32.2 17 47.3 -114. MT Ref ## 14 12381400 0.0698 55 South Fo… 151. 17 47.2 -114. MT Ref ## 15 12383500 0.0470 19 Big Knif… 17.7 17 47.1 -114. MT Ref ## 16 12388400 0.100 117 Revais C… 60.8 17 47.3 -114. MT Ref ## 17 12390700 0.0738 64 Prospect… 470. 17 47.6 -115. MT Ref ## # … with 16 more variables: AGGECOREGION &lt;chr&gt;, PPTAVG_BASIN &lt;dbl&gt;, ## # PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, ## # T_MAX_BASIN &lt;dbl&gt;, T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, ## # T_MIN_BASIN &lt;dbl&gt;, T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, ## # SNOW_PCT_PRECIP &lt;dbl&gt;, PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, ## # wy00_09 &lt;dbl&gt;, and abbreviated variable names ¹​DRAIN_SQKM, ²​LAT_GAGE, ## # ³​LNG_GAGE And one that keeps flows less than 100 cfs in the “flow” dataframe. filter(flow, cfs &lt; 100) ## # A tibble: 4,169 × 8 ## StationID cfs surrogate datetime year quarter month day ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 PINE 11.6 N 2010-01-01 00:00:00 2010 1 1 1 ## 2 PINE 11.6 N 2010-01-01 01:00:00 2010 1 1 1 ## 3 PINE 11.2 N 2010-01-01 02:00:00 2010 1 1 1 ## 4 PINE 11.2 N 2010-01-01 03:00:00 2010 1 1 1 ## 5 PINE 11.2 N 2010-01-01 04:00:00 2010 1 1 1 ## 6 PINE 11.2 N 2010-01-01 05:00:00 2010 1 1 1 ## 7 PINE 11.2 N 2010-01-01 06:00:00 2010 1 1 1 ## 8 PINE 11.2 N 2010-01-01 07:00:00 2010 1 1 1 ## 9 PINE 10.9 N 2010-01-01 08:00:00 2010 1 1 1 ## 10 PINE 10.9 N 2010-01-01 09:00:00 2010 1 1 1 ## # … with 4,159 more rows Above we just executed the operation, but didn’t save it. Let’s save that work using the assignment operator. rbi_mt &lt;- filter(rbi, STATE == &quot;MT&quot;) low_flows &lt;- filter(flow, cfs &lt; 100) 3.9.1 Multiple conditions How many gages are there in Montana with an rbi greater than 0.05 filter(rbi, STATE == &quot;MT&quot; &amp; RBI &gt; 0.05) ## # A tibble: 15 × 26 ## site_no RBI RBIrank STANAME DRAIN…¹ HUC02 LAT_G…² LNG_G…³ STATE CLASS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 6043500 0.0724 61 Gallatin… 2120. 10U 45.5 -111. MT Ref ## 2 6073500 0.104 123 Dearborn… 835. 10U 47.2 -112. MT Ref ## 3 6154410 0.118 157 Little P… 33.4 10U 48.0 -109. MT Ref ## 4 6187915 0.110 143 Soda But… 73.1 10U 45.0 -110. MT Ref ## 5 6191000 0.0627 46 Gardner … 514. 10U 45.0 -111. MT Ref ## 6 6191500 0.0649 49 Yellowst… 6784. 10U 45.1 -111. MT Ref ## 7 6289000 0.0652 50 Little B… 471. 10U 45.0 -108. MT Ref ## 8 6291500 0.0923 94 Lodge Gr… 218 10U 45.1 -108. MT Ref ## 9 12358500 0.0922 93 Middle F… 2939. 17 48.5 -114. MT Ref ## 10 12374250 0.0848 77 Mill Cr … 50.8 17 47.8 -115. MT Ref ## 11 12375900 0.0985 113 South Cr… 19.7 17 47.5 -114. MT Ref ## 12 12377150 0.118 153 Mission … 32.2 17 47.3 -114. MT Ref ## 13 12381400 0.0698 55 South Fo… 151. 17 47.2 -114. MT Ref ## 14 12388400 0.100 117 Revais C… 60.8 17 47.3 -114. MT Ref ## 15 12390700 0.0738 64 Prospect… 470. 17 47.6 -115. MT Ref ## # … with 16 more variables: AGGECOREGION &lt;chr&gt;, PPTAVG_BASIN &lt;dbl&gt;, ## # PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, T_AVG_SITE &lt;dbl&gt;, ## # T_MAX_BASIN &lt;dbl&gt;, T_MAXSTD_BASIN &lt;dbl&gt;, T_MAX_SITE &lt;dbl&gt;, ## # T_MIN_BASIN &lt;dbl&gt;, T_MINSTD_BASIN &lt;dbl&gt;, T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, ## # SNOW_PCT_PRECIP &lt;dbl&gt;, PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, ## # wy00_09 &lt;dbl&gt;, and abbreviated variable names ¹​DRAIN_SQKM, ²​LAT_GAGE, ## # ³​LNG_GAGE Challenge: Filter for flow less than 100 cfs just for the NFDR gauge in “flow”. 3.10 Arrange Arrange sorts by a column in your dataset. Sort the rbi data by the RBI column in ascending and then descending order arrange(rbi, RBI) ## # A tibble: 1,144 × 26 ## site_no RBI RBIrank STANAME DRAIN…¹ HUC02 LAT_G…² LNG_G…³ STATE CLASS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 6408700 0.0108 1 RHOADS F… 20.8 10U 44.1 -104. SD Ref ## 2 6430850 0.0192 2 LITTLE S… 71.8 10U 44.3 -104. SD Ref ## 3 10244950 0.0230 3 STEPTOE … 28.2 16 39.2 -115. NV Ref ## 4 2267000 0.0286 4 CATFISH … 169. 3 28.0 -81.5 FL Non-… ## 5 6775500 0.0300 5 MIDDLE L… 5460. 10L 41.8 -100. NE Ref ## 6 6430532 0.0303 6 CROW CRE… 106. 10U 44.6 -104. SD Ref ## 7 14158500 0.0306 7 MCKENZIE… 237. 17 44.4 -122. OR Ref ## 8 6037500 0.0338 8 Madison … 1126. 10U 44.7 -111. MT Ref ## 9 10109001 0.0382 9 COM F LO… 556. 16 41.7 -112. UT Ref ## 10 10243700 0.0391 10 CLEVE C … 83.5 16 39.2 -115. NV Ref ## # … with 1,134 more rows, 16 more variables: AGGECOREGION &lt;chr&gt;, ## # PPTAVG_BASIN &lt;dbl&gt;, PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, ## # T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;, T_MAXSTD_BASIN &lt;dbl&gt;, ## # T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;, T_MINSTD_BASIN &lt;dbl&gt;, ## # T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;, ## # PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt;, and ## # abbreviated variable names ¹​DRAIN_SQKM, ²​LAT_GAGE, ³​LNG_GAGE arrange(rbi, desc(RBI)) ## # A tibble: 1,144 × 26 ## site_no RBI RBIrank STANAME DRAIN…¹ HUC02 LAT_G…² LNG_G…³ STATE CLASS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 9486350 1.76 1144 CANADA DE… 675. 15 32.3 -111. AZ Non-… ## 2 9513860 1.75 1143 SKUNK CRE… 170. 15 33.7 -112. AZ Non-… ## 3 8401200 1.62 1142 SOUTH SEV… 534 13 32.6 -104. NM Ref ## 4 9487000 1.58 1141 BRAWLEY W… 2028. 15 32.1 -111. AZ Ref ## 5 9535100 1.57 1140 SAN SIMON… 1483. 15 32.0 -112. AZ Ref ## 6 8202700 1.56 1139 Seco Ck a… 435. 12 29.4 -99.3 TX Ref ## 7 11065000 1.55 1138 Lytle Cre… 365. 18 34.1 -117. CA Non-… ## 8 7019120 1.51 1137 Fishpot C… 24.9 7 38.6 -90.5 MO Non-… ## 9 7233500 1.50 1136 Palo Duro… 2909. 11 36.2 -101. TX Ref ## 10 6846500 1.40 1135 BEAVER C … 4358. 10L 40.0 -101. KS Ref ## # … with 1,134 more rows, 16 more variables: AGGECOREGION &lt;chr&gt;, ## # PPTAVG_BASIN &lt;dbl&gt;, PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, ## # T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;, T_MAXSTD_BASIN &lt;dbl&gt;, ## # T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;, T_MINSTD_BASIN &lt;dbl&gt;, ## # T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;, ## # PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt;, and ## # abbreviated variable names ¹​DRAIN_SQKM, ²​LAT_GAGE, ³​LNG_GAGE 3.11 Select Look at the RBI dataframe. There are too many columns! You will often want to get rid of some columns and clean up the dataframe (df) for analysis. Select Site name, state, and RBI from the rbi data Note they come back in the order you put them in in the function, not the order they were in in the original data. You can do a lot more with select, especially when you need to select a bunch of columns but don’t want to type them all out. For example, if you want to select a group of columns you can specify the first and last with a colon in between (first:last) and it’ll return all of them. Select the rbi columns from site_no to DRAIN_SQKM. You can also remove one column with select(-column). Remove the “surrogate” column from flow. rbi_mt_thin &lt;- select(rbi, STANAME, STATE, RBI) rbi_thin &lt;- select(rbi, site_no:DRAIN_SQKM) flow_thin &lt;- select(flow, -surrogate) 3.12 Mutate Use mutate to add new columns based on additional ones. Common uses are to create a column of data in different units, or to calculate something based on two columns. You can also use it to just update a column, by naming the new column the same as the original one (but be careful because you’ll lose the original one!). Create a new column in rbi called T_RANGE by subtracting T_MIN_SITE from T_MAX_SITE mutate(rbi, T_RANGE = T_MAX_SITE - T_MIN_SITE) ## # A tibble: 1,144 × 27 ## site_no RBI RBIrank STANAME DRAIN…¹ HUC02 LAT_G…² LNG_G…³ STATE CLASS ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1013500 0.0584 35 Fish Rive… 2253. 1 47.2 -68.6 ME Ref ## 2 1021480 0.208 300 Old Strea… 76.7 1 44.9 -67.7 ME Ref ## 3 1022500 0.198 286 Narraguag… 574. 1 44.6 -67.9 ME Ref ## 4 1029200 0.132 183 Seboeis R… 445. 1 46.1 -68.6 ME Ref ## 5 1030500 0.114 147 Mattawamk… 3676. 1 45.5 -68.3 ME Ref ## 6 1031300 0.297 489 Piscataqu… 304. 1 45.3 -69.6 ME Ref ## 7 1031500 0.320 545 Piscataqu… 769 1 45.2 -69.3 ME Ref ## 8 1037380 0.318 537 Ducktrap … 39 1 44.3 -69.1 ME Ref ## 9 1044550 0.242 360 Spencer S… 500. 1 45.3 -70.2 ME Ref ## 10 1047000 0.344 608 Carrabass… 909. 1 44.9 -70.0 ME Ref ## # … with 1,134 more rows, 17 more variables: AGGECOREGION &lt;chr&gt;, ## # PPTAVG_BASIN &lt;dbl&gt;, PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, ## # T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;, T_MAXSTD_BASIN &lt;dbl&gt;, ## # T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;, T_MINSTD_BASIN &lt;dbl&gt;, ## # T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;, ## # PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt;, ## # T_RANGE &lt;dbl&gt;, and abbreviated variable names ¹​DRAIN_SQKM, ²​LAT_GAGE, … When downloading data from the USGS through R, you have to enter the gage ID as a character, even though they are all made up of numbers. So to practice doing this, update the site_no column to be a character datatype mutate(rbi, site_no = as.character(site_no)) ## # A tibble: 1,144 × 26 ## site_no RBI RBIrank STANAME DRAIN…¹ HUC02 LAT_G…² LNG_G…³ STATE CLASS ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1013500 0.0584 35 Fish Rive… 2253. 1 47.2 -68.6 ME Ref ## 2 1021480 0.208 300 Old Strea… 76.7 1 44.9 -67.7 ME Ref ## 3 1022500 0.198 286 Narraguag… 574. 1 44.6 -67.9 ME Ref ## 4 1029200 0.132 183 Seboeis R… 445. 1 46.1 -68.6 ME Ref ## 5 1030500 0.114 147 Mattawamk… 3676. 1 45.5 -68.3 ME Ref ## 6 1031300 0.297 489 Piscataqu… 304. 1 45.3 -69.6 ME Ref ## 7 1031500 0.320 545 Piscataqu… 769 1 45.2 -69.3 ME Ref ## 8 1037380 0.318 537 Ducktrap … 39 1 44.3 -69.1 ME Ref ## 9 1044550 0.242 360 Spencer S… 500. 1 45.3 -70.2 ME Ref ## 10 1047000 0.344 608 Carrabass… 909. 1 44.9 -70.0 ME Ref ## # … with 1,134 more rows, 16 more variables: AGGECOREGION &lt;chr&gt;, ## # PPTAVG_BASIN &lt;dbl&gt;, PPTAVG_SITE &lt;dbl&gt;, T_AVG_BASIN &lt;dbl&gt;, ## # T_AVG_SITE &lt;dbl&gt;, T_MAX_BASIN &lt;dbl&gt;, T_MAXSTD_BASIN &lt;dbl&gt;, ## # T_MAX_SITE &lt;dbl&gt;, T_MIN_BASIN &lt;dbl&gt;, T_MINSTD_BASIN &lt;dbl&gt;, ## # T_MIN_SITE &lt;dbl&gt;, PET &lt;dbl&gt;, SNOW_PCT_PRECIP &lt;dbl&gt;, ## # PRECIP_SEAS_IND &lt;dbl&gt;, FLOWYRS_1990_2009 &lt;dbl&gt;, wy00_09 &lt;dbl&gt;, and ## # abbreviated variable names ¹​DRAIN_SQKM, ²​LAT_GAGE, ³​LNG_GAGE 3.13 Summarize Summarize will perform an operation on all of your data, or groups if you assign groups. Use summarize to compute the mean, min, and max rbi rbi_sum &lt;- summarize(rbi, meanrbi = mean(RBI), maxrbi = max(RBI), minrbi = min(RBI)) Now use the group function to group rbi by state and then summarize in the same way as above, but for the full r rbi_state &lt;- group_by(rbi, STATE) rbi_state &lt;- summarize(rbi_state, meanrbi = mean(RBI), maxrbi = max(RBI), minrbi = min(RBI)) 3.14 Multiple operations with pipes You will note that your environment is filling up with objects. We can eliminate many of those by using pipes. The pipe operator %&gt;% allows you to perform multiple operations in a sequence without saving intermediate steps. Not only is this more efficient, but structuring operations with pipes is also more intuitive than nesting functions within functions (the other way you can do multiple operations). When you use the pipe, it basically takes whatever came out of the first function and puts it into the data argument for the next one, so: rbi %&gt;% group_by(STATE) is the same as group_by(rbi, STATE) Take the groupby and summarize code from above and perform the operation using the pipe rbi_sum &lt;- rbi %&gt;% group_by(STATE) %&gt;% summarize(meanrbi = mean(RBI), maxrbi = max(RBI), minrbi = min(RBI)) 3.15 A final comment on NAs We will talk more about this when we discuss stats, but some operations will fail if there are NA’s in the data. If appropriate, you can tell functions like mean() to ignore NAs by using na.rm = TRUE. You can also use drop_na() if you’re working with a tibble. But be aware if you use that and save the result, drop_na() gets rid of the whole row, not just the NA. Because what would you replace it with…. an NA? First, lets create a small data frame called x that includes: 1, 2, 3, 4, NA. How do we do that? x &lt;- c(1,2,3,4,NA) Next, lets take the mean of x. mean(x) ## [1] NA How do you think we can fix this problem? mean(x, na.rm = TRUE) ## [1] 2.5 3.16 That’s it for today Can you run all of the code in this unit? Do you get errors? If you are working on a lab computer have you gotten your folder management set up? 3.17 Exit ticket If you have an error or problem we need to manage - let me know. If not write NA! "],["lab-1-data-vis-wrangling-and-programming-35-pts.html", "Chapter 4 Lab 1: Data vis, wrangling, and programming (35 pts) 4.1 Problem 1 (5 pts) 4.2 Problem 2 (5 pts) 4.3 Problem 3 (5 pts) 4.4 Problem 4 (5 pts) 4.5 Problem 5 (5 pts) 4.6 Problem 6 (5 pts) 4.7 Summary (5 pts) 4.8 Feeback 4.9 Deliverables", " Chapter 4 Lab 1: Data vis, wrangling, and programming (35 pts) You can find the repo for this lab here As we have done previously, go to Code, download zip and put folder on your computer. Open the project in that folder and then open the .Rmd. Remember that opening the project from that folder will set that folder as the “working directory”. Doing so means that when you read in your data, R will “look” in the right place to find it. Remember to rename the .Rmd file with your name in the file name. This lab covers workflow and functions that you have seen and a few things that haven’t been explicitly demonstrated. Using functions that haven’t been explicitly demonstrated will help you in developing your ability to use new functions and workflows. Understanding how to utilize resources like Stack Overflow and package vignettes will help you solve coding problems. You can also get function and package help from the console by typing “?”. For example, you could type “?ggplot” or “?tidyverse” into the console and a help window will appear in the lower right. Also, when you are searching for coding help it is useful to be explicit about whether you are in base R or tidyverse. 4.1 Problem 1 (5 pts) Load the tidyverse library. Read in the pine_nfdr csv using read_csv(). Name this “pine_nfdr”. Make a plot with the date on the x axis, discharge on the y axis. Show the discharge of the two watersheds as a line, coloring by watershed (StationID). Use a theme to remove the grey background. Label the axes appropriately with labels and units. Bonus: change the title of the legend to “Gauging Station” 4.2 Problem 2 (5 pts) Make a boxplot to compare the discharge of Pine to NFDR for February 2010. Hint: use the pipe operator and the filter() function. 4.3 Problem 3 (5 pts) Read in the flashy csv. Name this “flashy”. Create a new df called flashy_west that includes data for: MT, ID, WY, UT, CO, NV, AZ, and NM Using flashy_west: Plot PET (Potential Evapotranspiration) on the X axis and RBI (flashiness index) on the Y axis. Color the points based on what state they are in. Use the linedraw ggplot theme. Using flashy_west make a facet wrap with PET on the x and RBI on the y. Facet by state. 4.4 Problem 4 (5 pts) We want to look at the amount of snow for each site in the flashy_west df. Problem is, we are only given the average amount of total precip (PPTAVG_BASIN) and the percentage of snow (SNOW_PCT_PRECIP). Create a new column in the df called “snow_avg_basin” and make it equal to the average total precip times the percentage of snow (careful with the percentage number). Make a barplot showing the amount of snow for each site in MT. Put station name on the x axis and snow amount on the y. You have to add something to geom_bar() to use it for a 2 variable plot. Use “?geom_bar” in the console and the internet to investigate. The x axis of the resulting plot looks terrible! Rotate the X axis labels so we can read them. 4.5 Problem 5 (5 pts) Create a new tibble called “flashy_west_sum” that contains the min, max, and mean PET for each state in flashy_west. Sort/arrange the tibble by mean PET from high to low. Give your columns meaningful names within the summarize function or using rename(). You haven’t seen rename yet. Use ?rename in the console or search for examples. When searching you need to indicate that you are looking for “tidyverse rename”. Rename is part of dplyr, which is part of tidyverse. Create a barplot from flashy_west_sum with max_pet on the y and state on the x. 4.6 Problem 6 (5 pts) Take the tibble from problem 5 and create a new df “flashy_west_new” by first creating a new column that is the Range of the PET (max PET - min PET). Then get rid of the max PET and min PET columns so the tibble just has columns for State, mean_PET, and PET_range. Using flashy_west_new make an interactive ggplotly with mean_pet on the x and range_pet on the y. Color by state and label axes. Save flashy_west_new as “flashy_west_new.csv” to your folder for this lab using the write_csv function. To get help on this function type “?write_csv” into the console. 4.7 Summary (5 pts) Using the figues from problems 5 &amp; 6 comment on the pattern in max PET across the western states. What climatological variable is likely driving this pattern? Do you think the values of actual evapotranspiration (AET) would be the same or different from the values of potential evapotranspiration (PET)? In which state would AET and PET potentially be most different and why? PET Reading: From NOAA Vargas Zepetello et al. 2019b read Abstract and Introduction sections 4.8 Feeback How long did this lab take you? Is there anything in particular you would like more practice with? 4.9 Deliverables Knit this .Rmd as an .html and submit your lab_1_your_name.Rmd and lab_1_your_name.html on D2L. "],["statistics-in-hydrology---unit-3.html", "Chapter 5 Statistics in hydrology - Unit 3 5.1 Learning objectives 5.2 Homework Q1 (2 pts) 5.3 What is the difference between a sample and a population? 5.4 Homework Q2 (2 pts) 5.5 Measuring our sample distribution: central tendency 5.6 So what’s a weighted average? 5.7 Measures of variability 5.8 Homework Q3 (2 pts) 5.9 What is a normal distribution and how can we determine if we have one? 5.10 Homework Q4 (2 pts) 5.11 Homework Q5 (2 pts) 5.12 Deliverable (10 pts, due Thursday 2/2 by 11:59 PM)", " Chapter 5 Statistics in hydrology - Unit 3 You can find the repo for this activity here 5.1 Learning objectives Describe the characteristics of normal and non-normal distributions Understand the difference between a sample and a population Quantitatively describe data distributions Test data sets for normality Reading for this section Statistical Methods in Water Resources: Chapter 1 Today will use a new package called patchwork that is an extension to ggplot. See here for ggplot extensions including patchwork. library(tidyverse) library(patchwork) First let’s generate some synthetic data and talk about how to visualize it. # generate a normal distribution ExNorm &lt;- rnorm(1000, mean = 5) %&gt;% as_tibble() # look at distributions # first using a histogram ExNorm %&gt;% ggplot(aes(value)) + geom_histogram() # next using the pdf ExNorm %&gt;% ggplot(aes(value)) + stat_density() #Let&#39;s generate a plot that makes comparing these two easier Stack plots to compare histogram and pdf We will save each plot as “ggplot object” and then output them using the patchwork package (loaded in the setup chunk). We have made other objects, like data frames or values, how do you think you would make a ggplot object? # histogram exhist &lt;- ExNorm %&gt;% ggplot(aes(value)) + geom_histogram() # pdf expdf &lt;- ExNorm %&gt;% ggplot(aes(value)) + stat_density() # put the plots side by side with + or on top of each other with / exhist/expdf 5.2 Homework Q1 (2 pts) What is the difference between a histogram and a pdf? What features of the histogram are preserved? Which are lost? 5.3 What is the difference between a sample and a population? Simply put: a population is the thing you are trying to measure. A sample is the data you measure in an effort to measure the population. A sample is a subset of a population. Let’s write some code for an example: We will create a POPULATION that is a large set of numbers. Think of this is as the concentration of Calcium in every bit of water in a lake. Then we will create a SAMPLE by randomly grabbing values from the POPULATION. This simulates us going around in a boat and taking grab samples in an effort to figure out the concentration of calcium in the lake. We can then run this code a bunch of times, you’ll get a different sample each time. You can also take a smaller or larger number of samples by changing “size” in the sample() function. all_the_water &lt;- rnorm(10000, mean = 6) %&gt;% as_tibble() sample_of_water &lt;- sample(all_the_water$value, size = 100, replace = FALSE) %&gt;% as_tibble() population_hist &lt;- all_the_water %&gt;% ggplot(aes(value))+ geom_histogram()+ ggtitle(&quot;Population: \\n All water in lake&quot;) sample_hist &lt;- sample_of_water %&gt;% ggplot(aes(value))+ geom_histogram()+ ggtitle(&quot;Your sample \\n of the lake&quot;) population_hist + sample_hist # OR sample_hist/population_hist 5.4 Homework Q2 (2 pts) How does your sample distribution look similar or different from the population? Why does the sample change every time you run it? What happens as you increase or decrease the number of samples? What happens if you set the number of samples to the size of the population? 5.5 Measuring our sample distribution: central tendency When we take a sample of a population, there are a few things we will want to measure about the distribution of values: where is the middle, how variable is it, and is it skewed to one side or another? The first of these, “where is the middle?” is addressed with measures of central tendency. We will discuss three possible ways to measure this. The mean, median, and weighted mean. To explain the importance of choosing between the mean and median, we will first import some discharge data. Read in the PINE discharge data. pineQ &lt;- read_csv(&quot;PINE_Jan-Mar_2010.csv&quot;) To find the mean (average), you just sum up all the values in your sample and divide by the number of values. To find the median, you put the values IN ORDER, and choose the middle value. The middle value is the one where there are the same number of values higher than that value as there are values lower than it. Because it uses the order of the values rather than just the values themselves, the median is resistant to skewed distributions. This means it is less effected by very large or very small values compared to most values in the sample data. Let’s look at our normal distribution from earlier (ExNorm) compared to the Pine watershed discharge (pineQ) Note that distributions like pineQ, that are positively skewed, are very common in environmental data. # Calculate mean and median for &quot;cfs&quot; in pineQ and &quot;values&quot; in ExNorm pineMean &lt;- mean(pineQ$cfs) pineMedian &lt;- median(pineQ$cfs) xmean &lt;- mean(ExNorm$value) xmedian &lt;- median(ExNorm$value) # plot mean and median on the ExNorm distribution Ex &lt;- ExNorm %&gt;% ggplot(aes(value)) + geom_histogram()+ geom_vline(xintercept = xmean, color = &quot;red&quot;) + geom_vline(xintercept = xmedian, color = &quot;blue&quot;) #plot mean and median on the pineQ discharge histogram PineP &lt;- pineQ %&gt;% ggplot(aes(cfs)) + geom_histogram()+ geom_vline(xintercept = pineMean, color = &quot;red&quot;)+ geom_vline(xintercept = pineMedian, color = &quot;blue&quot;) Ex / PineP 5.6 So what’s a weighted average? When you compute a standard mean or median, you are giving equal weight to each measurement. Adding up all the values in a sample and dividing by the number of samples is the same as multiplying each value by 1/# of samples. For instance if you had ten samples, to calculate the mean you would add them up and divide by 10. This is the same as multiplying each value by 1/10 and then adding them up. Each value is equally weighted at 1/10. There are certain situations in which this is not the ideal way to calculate an average. A common one in hydrology is that you have samples that are supposed to represent different portions of an area. One sample may be taken to measure a forest type that takes up 100 ha of a watershed while another sample represents a forest type that only takes up 4 ha. You may not want to simply average those values! Another example is precipitation gages. In the image below, you see there are 5 rain gages. To get a precipitation number for the watershed, we could just average them, or we could assume they represent an area of the watershed and then weight their values by the area they represent. One method of designating the areas is by using Theissen polygons (the middle watershed). Another method of weighting is isohyetal contours, but we won’t worry about that for now! In the weighted situation, we find the average by multiplying each precipitation values by the proportion of the watershed it represents, shown by the Thiessen polygons, and then add them all together. Let’s do an example. source: https://edx.hydrolearn.org/assets/courseware/v1/e5dc65098f1e8c5faacae0e171e28ccf/asset-v1:HydroLearn+HydroLearn401+2019_S2+type@asset+block/l2_image004.png The precip values for the watershed above are 4.5, 5.5, 5.8, 4.7, and 3.0 We will assume the proportions of the watershed that each gauge represents are 0.20, 0.15, 0.40, 0.15, 0.10, respectively (or 20%, 15%, 40%, 15%, 10%) Challenge: Write some code to compute the regular mean precip from the values, and then the weighted mean. 5.7 Measures of variability Measures of variability allow us to measure the width of our sample data histogram or pdf. If all the values in our sample are close together, we would have small measures of variability, and a pointy pdf/histogram. If they vary more, we would have larger measures of variability and a broad pdf/histogram. We will explore four measures of variability: 5.7.0.1 Variance: Sum of the squared difference of each value from the mean divided by the number of samples minus 1. In R code “var()” (https://pubs.usgs.gov/tm/04/a03/tm4a3.pdf) source: https://pubs.usgs.gov/tm/04/a03/tm4a3.pdf 5.7.0.2 Standard deviation: The square root of the variance. In R code “sd()” **Both variance and standard deviation are sensitive to outliers. 5.7.0.3 CV: Coefficient of Variation CV is simply the standard deviation divided by the mean of the data. Because you divide by the mean, CV is dimensionless. This allows you to use it to compare the variation across distributions with very different magnitudes (e.g., discharge at different gauges). 5.7.0.4 IQR: Interquartile Range IQR is resistant to outliers because it works like a median. It measures the range of the middle 50% of the data in your distribution. So the IQR is the difference between the 75th and 25th percentiles of your data, where the 75th percentile means 75% of the data is BELOW that value and the 25th percentile means 25% is below that value. Using the same vocabulary, the median is the same as the 50th percentile of the data. If you ask R for the QUANTILES of your sample data, it will give you the values at which 0%, 25%, 50%, 75%, and 100% of the data are below. These are the 1,2,3,4, and 5th quantiles. Therefore, the IQR is the difference between the 4th and 2nd quantile. Okay, code time. First, let’s explore how changing the variability of a distribution changes the shape of it’s distribution. Create a plot a random normal distribution using rnorm() and set sd to different numbers. Make the mean of the distribution 0, the sample size 300, and the standard deviation 1 to start. Then increase the standard deviation incrementally to 10 and see what happens. Make the limits of the x axis on the plot -30 to 30. rnorm(300, mean = 0, sd = 1) %&gt;% as_tibble %&gt;% ggplot(aes(value))+ stat_density()+ xlim(c(-30,30)) 5.8 Homework Q3 (2 pts) What happens to the shape of the distribution as the SD increases? If you were to plot the pdf of two hydrographs, one that is flashy, one that isn’t - predict what those distributions would look like. Now let’s calculate the standard deviation, variance, coefficient of variation, and IQR of the Pine discharge data. # standard deviation sd(pineQ$cfs) ## [1] 84.47625 # variance var(pineQ$cfs) ## [1] 7136.237 # coefficient of variation sd(pineQ$cfs)/mean(pineQ$cfs) ## [1] 2.800221 # IQR using the IQR funciton IQR(pineQ$cfs) ## [1] 8.1325 # IQR using the quantile function quants &lt;- quantile(pineQ$cfs) quants[4] - quants[2] ## 75% ## 8.1325 5.8.0.1 What about how lopsided the distribution is? There are several ways to measure this as well, but we are just going to look at one: The Quartile skew. The quartile skew is the difference between the upper quartiles (50th-75th) and the lower quartiles (25th-50th) divided by the IQR (75th-25th). source: https://pubs.usgs.gov/tm/04/a03/tm4a3.pdf Let’s look at the quartile skew of the two distributions we’ve been measuring. Calculate it for the pineQ discharge data and the random normal distribution we generated. Which one is more skewed? quantsP &lt;- quantile(pineQ$cfs) ((quantsP[3]-quantsP[2]) - (quantsP[2] - quantsP[1])) / quantsP[3] - quantsP[1] ## 50% ## -4.837233 quantsX &lt;- quantile(ExNorm$value) ((quantsX[3]-quantsX[2]) - (quantsX[2] - quantsX[1])) / quantsX[3] - quantsX[1] ## 50% ## -2.540214 5.9 What is a normal distribution and how can we determine if we have one? The distribution we generated with rnorm() is a normal distribution. The distribution of pineQ discharge is not normal. Now that we’ve looked at different ways to characterize distributions, we have the vocabulary to describe why. Normal distributions: mean = median, half values to the right, half to the left symmetric (not skewed) single peak Many statistical tests require that the distribution of the data you put into them is normally distributed. BE CAREFUL! There are also tests that use ranked data. Similar to how the median is resistant to outliers, these rank-based tests are resistant to non-normal data. Two popular ones are Kruskal-Wallis and Wilcoxon rank-sum. But how far off can you be before you don’t consider a distribution normal? Seems like a judgement call! R to the rescue! There is a built in test for normality called shapiro.test(), which performs the Shapiro-Wilk test of normality. The hypothesis this test tests is “The distribution is normal.” So if this function returns a p-value less than 0.05, you reject that hypothesis and your distribution is NOT normal. You can also make a quantile-quantile plot. A straight line on this plot indicates a normal distribution, a non-straight line indicates it is not normal. Let’s test Pine discharge data for normality with the Shapiro test and the Q-Q test. shapiro.test(pineQ$cfs) ## ## Shapiro-Wilk normality test ## ## data: pineQ$cfs ## W = 0.27155, p-value &lt; 2.2e-16 qqnorm(pineQ$cfs) Let’s also look at the Q-Q plot with some synthetic data.  Create a normal data set and play with the number of values (n, samples). Investigate how changing the number of samples influences the linearity of the Q-Q plot. Also run this code multiple times with the same n and see if/how the results change. norm &lt;- rnorm(n = 10, mean = 0, sd = 1) %&gt;% as_tibble() qqnorm(norm$value) 5.10 Homework Q4 (2 pts) Do the results change more from run to run when the n is high or low and why? 5.11 Homework Q5 (2 pts) Test your all_the_water, ExNorm, and sample_of_water data frames for normality using shapiro test and qqnorm. Which are and which are not normal? 5.12 Deliverable (10 pts, due Thursday 2/2 by 11:59 PM) Write up your answers to HW questions 1 - 5 in a word doc and submit on D2L. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
